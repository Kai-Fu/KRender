
struct PhongParam
{
	float3 diffuse_color;
	float3 specular_color;
	float3 translucent;
};

float dot(float3 a, float3 b)
{
	float3 temp = a * b;
	return temp.x + temp.y + temp.z;
}

void ShadeTransmission(PhongParam% uniforms, TransContext% ctx, float3& outClr)
{
	float di = dot(ctx.lightVec, ctx.normal);
	if (di < 0) di = -di;
	
	outClr = uniforms.translucent;
	outClr = outClr * di;
}

void Shade(PhongParam% uniforms, SurfaceContext% ctx, float3& outClr)
{
	outClr = float3(0,0,0);
	float3 inL_Dir = float3(0,0,0);
	float3 inL_Intensity = float3(0,0,0);
	
	float3 diffuseCoefficence;
	diffuseCoefficence = uniforms.diffuse_color;
	float do = dot(ctx.outVec, ctx.normal);
	
	if (do > 0) {		
		for (; GetNextLightSample(ctx.tracerData, inL_Dir, inL_Intensity);) {
		
			float di = dot(inL_Dir, ctx.normal);
			if (di < 0)
				di = 0;
			
			float3 dIntensity = float3(di, di, di) * inL_Intensity;
			outClr = outClr + dIntensity * diffuseCoefficence;
		}
	}
	
		
	if (uniforms.translucent.x < 1 || uniforms.translucent.y < 1 || uniforms.translucent.z < 1) {
		float3 transClr = CalcSecondaryRay(ctx.tracerData, -ctx.outVec);
		outClr = outClr * (float3(1,1,1) - uniforms.translucent) + transClr * uniforms.translucent;
	}
	
	
}